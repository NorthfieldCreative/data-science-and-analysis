##########################################################################
##########################################################################
##                                                                      ##
##          Vulnerability Reporting & Prioritization Backbone           ##
##                                                                      ##
##########################################################################
##########################################################################


import matplotlib.pyplot as plt
from datetime import datetime
import re
import mysql.connector
import sqlalchemy
import getmonth
import currenttop
import ytdvulns
import cisalist
import consistenthosts
import inventory
import exploits


#Variable to capture the current numerical month
rawmonth=datetime.now().month
year=datetime.now().year
#variable to be used later to hold the month in string form
currentmonth="null"

# Setting a standard size for charts
plt.rcParams['figure.figsize'] = [18, 7]




#######################################
###     database connection         ###
#######################################
dbuser="exiged"
dbpass="PROduct$123CHEmical$123"
dbip="192.168.100.12"
dbname="testdb"
#dbpass=input('Password:')
mydb = mysql.connector.connect(
  host=dbip,
  user=dbuser,
  password=dbpass,
  database=dbname
)

mycursor = mydb.cursor()
## variable used to instantiate connections
sqladbconn = sqlalchemy.create_engine('mysql+mysqlconnector://{0}:{1}@{2}/{3}'.
                                               format(dbuser, dbpass, 
                                                      dbip, dbname))


#Variables to check if data exists in the DB
currenttable=getmonth.getmonth(rawmonth)+"_"+str(year)
lastmonthstable=getmonth.getmonth(rawmonth-1)+"_"+str(year)

##shows tables in the database
mycursor.execute("SHOW TABLES")

###############################################
### checking if a table already exists      ###
### for the current month in the DB         ###
###############################################
for x in mycursor:
    if not currenttable.lower() in x[0]:
        currentmonthindb=False
        
    else:
        currentmonthindb=True
        break


#'''
###########################################################################
### If current data not found, asking if it is available for ingestion  ###
###########################################################################
if currentmonthindb==False:
    print("Data for the current month was not found in the database")
    newdatatoprocess=input("Is this month's scan available for ingestion? (y/n)")
    while newdatatoprocess != "y" and newdatatoprocess != "n":
        newdatatoprocess=input("Please input exactly y or n. Is this month's scan available for ingestion? (y/n)")
    if newdatatoprocess=="y":
        print("new data confirmed available for processing")
        datatoprocess=input("drag and drop scan data here to process")
        parsingfileinput=re.findall("c:.*\.xlsx", datatoprocess)
        if not parsingfileinput:
            print("xlsx file not found, please start over and try again")
        else:
            print("Standby, ingesting the below file:")
            print(parsingfileinput[0])
    else:
        print("new data confirmed not available.")
        continuewithold=input("Would you like to proceed with older data? (y/n): ")
        while continuewithold != "y" and continuewithold !="n":
            continuewithold=input("Please input exactly y or n. Would you like to proceed with older data? (y/n: ")
        if continuewithold == "n":
            print("QUITTING")
            exit()






        ### ##############################################################  ###
    ###     ##                                                          ##      ###
###         ##      Let's get to work and process our functions!        ##          ###
    ###     ##                                                          ##      ###
        ### ##############################################################  ###

##  Current month top 10 IPs by severity
#'''
if continuewithold=="y":
    currenttop.currenttopipsandseveritychart(getmonth.getmonth(rawmonth-1), sqladbconn, year)
    #currenttopipsandseveritychart(getmonth.getmonth(rawmonth-1), sqladbconn)
else:
    currenttop.currenttopipsandseveritychart(getmonth.getmonth(rawmonth), sqladbconn, year)
    #currenttopipsandseveritychart(getmonth.getmonth(rawmonth), sqladbconn)
#'''


##  YTD vulns by month

ytdvulns.ytdvulnsbymonth(year,mycursor)
exit()
##  Find which CVES have been observed to be actively exploited

#'''
if continuewithold=="y":
    cisalist.exploitedinthewild(getmonth.getmonth(rawmonth-1),year,sqladbconn)
else:
    cisalist.exploitedinthewild(getmonth.getmonth(rawmonth),year,sqladbconn)

#'''

## Identifies hosts that are consistently vulnerable that remain vulnerable this month
consistenthosts.consistenhosts(year,mycursor,sqladbconn,continuewithold,rawmonth)

#'''
## Exports a CSV of the top 10 IPs this month with additional attributes
inventory.inventorytable(sqladbconn,continuewithold,year,rawmonth)


##  Searches CVES from the scan for available exploits

if continuewithold=="y":
    print(exploits.exploitsearch(getmonth.getmonth(rawmonth-1),year,sqladbconn))
else:
    print(exploits.exploitsearch(getmonth.getmonth(rawmonth)))
#'''